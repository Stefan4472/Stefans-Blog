openapi: 3.0.0
info:
  title: StefanOnSoftware API
  version: 0.1.0
  description: |
    This API is used to manage [the StefanOnSoftware blog](https://www.stefanonsoftware.com). Code for the StefanOnSoftware website is open-source and can be found [on Github](https://github.com/Stefan4472/Stefans-Blog).

    ## Blog Posts
    The main use of this API is to create, manage, and publish blog posts.

    Posts begin in a private draft stage and only become visible on the public website once they have been published. Once published, the post is available at a URL that uses its slug (e.g., 'www.stefanonsoftware.com/posts/\<slug>'). A published post can be "featured", which will lead to it being displayed on the landing page of the blog.

    Posts are written and stored in Markdown documents, which are rendered to HTML on request.

    Each post must specify three required images. The _featured_ image is displayed on the website landing page if the post is featured, and is also used as a page banner on narrow screens. The _banner_ image is used as a page banner on large screens. The _thumbnail_ image is a used when displaying the post in a listing, e.g. a search result. These images must comply with specific dimensions.

    ## Tags
    Posts can be categorized according to Tags, which serve to thematically group similar posts together and to pique readers' interest. The _tags_ API is used to create and manage tags.

    ## Files
    Posts almost always include multimedia such as images and videos. This media must be stored somewhere. The _files_ API is used by the author to upload files to the website, where they can then be used in posts.

servers:
  - url: https://www.stefanonsoftware.com/api/v1
    description: Live public website.

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic

  schemas:
    User:
      type: object
      description: A registered user
      required:
        - id
        - name
      properties:
        id:
          type: integer
          description: Unique integer ID assigned to this user
          readOnly: true
          example: 10
        name:
          type: string
          description: Name of the user
          example: Stefan Kussmaul
    Post:
      type: object
      description: A post on the website.
      required:
        - id
        - author
        - last_modified
      properties:
        id:
          type: integer
          description: Unique integer ID assigned to this post.
          readOnly: true
          example: 15
        author:
          $ref: '#/components/schemas/User'
          #description: The user who created (and therefore owns) this post.
        last_modified:
          type: string
          format: datetime
          description: Timestamp at which this post was last modified.
          readOnly: true
          example: 2022-09-15T10:40:52Z
        slug:
          type: string
          description: Unique "slug" used to make the URL for this post on the public website. Because the post URL (when published) is based on the slug, changing the slug will change the post's URL.
          example: gamedev-spritesheets
        title:
          type: string
          description: Title of the post.
          example: How to implement Spritesheets
        byline:
          type: string
          description: A short summary of the post that will be displayed when the post appears in a listing. It may also be used in the HTML description tag of the post on the public website, and when sending an email notification.
          example: In this post we'll use Java to implement a Spritesheet class, with which we can play back hand-drawn animation sequences.
        publish_date:
          type: string
          format: datetime
          description: Timestamp at which this post was published. Will be null if the post is not currently published.
          readOnly: true
          example: 2022-09-10T17:22:12Z
        featured_image:
          $ref: '#/components/schemas/File'
          #description: fileId of the featured image. The featured image represents the post on the front page when it is "featured", and is also displayed at the top of the post when viewed on the public website under certain conditions (e.g., small screen size).
        banner_image:
          $ref: '#/components/schemas/File'
          #description: fileId of the banner image. The banner image is displayed at the top of the post when viewed on the public website.
        thumbnail_image:
          $ref: '#/components/schemas/File'
          #description: fileId of the thumbnail image. The thumbnail image is displayed when the post appears in a listing (e.g. search result) on the public website.
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: Tags associated with this post.
        is_featured:
          type: boolean
          description: Whether this post is currently featured.
          readOnly: true
          example: false
        is_published:
          type: boolean
          description: Whether this post is currently published.
          readOnly: true
          example: true
#        file_references:
#          type: array
#          items:
#            type: string
#          description: FileIds that are "referenced" from this post. This includes the featured, banner, and thumbnail images, as well as any images displayed on the website.
#          readOnly: true
#          example: cd280bf9-b7bd-424e-ae56-4ea88120cfb9, 83fe542d-3fbb-475b-b667-62f37cc6574e, 1f536f1b-cb44-41e2-be18-c89140d0f02c
    Tag:
      type: object
      description: A tag used to categorize posts
      required:
        - slug
        - name
        - description
        - color
      properties:
        slug:
          type: string
          description: Unique "slug" used to make the URL for this tag on the public website. Cannot be changed.
          readOnly: true
          example: data-analysis
        name:
          type: string
          description: Human-readable name used when displaying the tag on the website
          example: Data Analysis
        description:
          type: string
          description: A short description used to help readers understand the tag.
          example: Posts that have to do with data analysis and visualization.
        color:
          type: string
          description: Hex color used when displaying the tag
          pattern: '^#[0-9a-fA-F]{6}$'
          example: '#FFFFFF'
    File:
      type: object
      description: A file stored on the webserver
      required:
        - id
        - upload_name
        - upload_date
        - uploaded_by
        - url
        - filetype
        - filename
        - hash
        - size
      properties:
        id:
          type: string
          description: UUID used to identify this file.
          readOnly: true
          example: 1f536f1b-cb44-41e2-be18-c89140d0f02c
        upload_name:
          type: string
          description: Original filename used when uploading this file.
          readOnly: true
          example: java_screenshot.jpg
        upload_date:
          type: string
          format: datetime
          description: Timestamp at which this file was uploaded.
          readOnly: true
          example: 2022-09-01T17:22:12Z
        uploaded_by:
          $ref: '#/components/schemas/User'
          #description: The user who uploaded this file.
        filetype:
          type: string
          enum: [IMAGE, VIDEO, DOCUMENT]
          description: General type of the file (determined by server during upload).
          readOnly: true
          example: IMAGE
        filename:
          type: string
          description: Filename, as stored on the webserver.
          readOnly: true
          example: 1f536f1b-cb44-41e2-be18-c89140d0f02c.jpg
        url:
          type: string
          description: URL that this file can be accessed under on the public website.
          readOnly: true
          example: https://www.stefanonsoftware.com/static/1f536f1b-cb44-41e2-be18-c89140d0f02c.jpg
        size:
          type: integer
          description: Size of the file, in bytes.
          readOnly: true
          example: 330060
        hash:
          type: string
          description: MD5 hash of the file contents.
          readOnly: true
          example: d7e1fcfe6aae23c19e69511c48e37a73

  parameters:
    QueryLimit:
      name: limit
      in: query
      required: true
      description: Limits the number of items returned per page
      schema:
        type: integer
    QueryOffset:
      name: offset
      in: query
      required: true
      description: Specifies the page number of items to return
      schema:
        type: integer
    PostId:
      name: post_id
      in: path
      required: true
      description: Unique postId assigned to a post
      schema:
        type: integer
    Tag:
      name: tag
      in: path
      required: true
      description: Unique tag slug
      schema:
        type: string
    FileId:
      name: file_id
      in: path
      required: true
      description: Unique fileId assigned to a file
      schema:
        type: string

  responses:
    ErrUnauthorized:
      description: Authentication information is missing or invalid.
      headers:
        WWW_Authenticate:
          schema:
            type: string
    ErrNoSuchPost:
      description: No post with the specified ID exists
      content:
        application/json:
          schema:
            type: string
            example: No post with the specified ID exists
    ErrNoSuchTag:
      description: No tag with the specified ID exists
      content:
        application/json:
          schema:
            type: string
            example: No tag with the specified ID exists
    ErrNoSuchFile:
      description: No file with the specified ID exists
      content:
        application/json:
          schema:
            type: string
            example: No file with the specified ID exists
    ErrNoPermissionToModifyPost:
      description: The user does not have permission to modify the desired post
      content:
        application/json:
          schema:
            type: string
            example: You do not have permission to modify the specified post
    ErrServerError:
      description: The server encountered an internal error
      content:
        application/json:
          schema:
            type: string
            example: Failed to write to the database

security:
  - BasicAuth: []

tags:
  - name: posts
    description: Everything about posts
  - name: commands
    description: Commands for more complex functionality
  - name: tags
    description: Tag management
  - name: files
    description: File management
  - name: emails
    description: Email list management

paths:
  ### Posts
  /posts:
    get:
      description: Get post information, applying optional filters and paging.
      tags:
        - posts
      parameters:
        - name: is_featured
          in: query
          description: Specifies whether to only return posts that are featured
          schema:
            type: boolean
        - name: is_published
          in: query
          description: Specifies whether to only return posts that are published
          schema:
            type: boolean
        - $ref: '#/components/parameters/QueryLimit'
        - $ref: '#/components/parameters/QueryOffset'
      responses:
        '200':
          description: Returned a list of posts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '401':
          $ref: '#/components/responses/ErrUnauthorized'
        '404':
          $ref: '#/components/responses/ErrNotFound'
        '500':
          $ref: '#/components/responses/ErrServerError'

    post:
      description: Create a new post. All parameters are optional; if unset, they will use default values.
      tags:
        - posts
      requestBody:
        # TODO: make required and generate defaults client-side
        content:
          application/json:
            schema:
              type: object
              properties:
                slug:
                  type: string
                title:
                  type: string
                byline:
                  type: string
                featured_image:
                  type: string
                banner_image:
                  type: string
                thumbnail_image:
                  type: string
      responses:
        '201':
          description: Successfully created and returned a new post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Error creating post
          content:
            application/json:
              schema:
                type: string
                example: featured_image does not meet size requirements.
        '401':
          $ref: '#/components/responses/ErrUnauthorized'
        '500':
          $ref: '#/components/responses/ErrServerError'

  /posts/{post_id}:
    parameters:
      - $ref: '#/components/parameters/PostId'
    get:
      description: Get information about a post
      tags:
        - posts
      responses:
        '200':
          description: Returned information about the post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          $ref: '#/components/responses/ErrUnauthorized'
        '404':
          $ref: '#/components/responses/ErrNoSuchPost'
        '500':
          $ref: '#/components/responses/ErrServerError'

    # TODO: make all required? Semantics get tricky
    put:
      description: Change post metadata. Can fail if an image is set that does not meet the specifications. Only the user who created the post can change it.
      tags:
        - posts
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - slug
                - title
                - byline
              properties:
                slug:
                  type: string
                title:
                  type: string
                byline:
                  type: string
                featured_image:
                  type: string
                banner_image:
                  type: string
                thumbnail_image:
                  type: string
      responses:
        '200':
          description: Changed metadata and returned the updated post.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: One or more parameters break the rules.
          content:
            application/json:
              schema:
                type: string
                example: Specified thumbnail_image has wrong dimensions
        '401':
          $ref: '#/components/responses/ErrUnauthorized'
        '403':
          $ref: '#/components/responses/ErrNoPermissionToModifyPost'
        '404':
          $ref: '#/components/responses/ErrNoSuchPost'
        '500':
          $ref: '#/components/responses/ErrServerError'

    delete:
      description: Delete a post
      tags:
        - posts
      responses:
        '204':
           description: Post was deleted
        '401':
          $ref: '#/components/responses/ErrUnauthorized'
        '403':
          $ref: '#/components/responses/ErrNoPermissionToModifyPost'
        '404':
          $ref: '#/components/responses/ErrNoSuchPost'
        '500':
          $ref: '#/components/responses/ErrServerError'

  /posts/{post_id}/content:
    parameters:
      - $ref: '#/components/parameters/PostId'
    get:
      description: Download the Markdown file of this post
      tags:
        - posts
      responses:
        '200':
          description: Returned the Markdown file
          content:
            application/octet-stream:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/ErrUnauthorized'
        '404':
          $ref: '#/components/responses/ErrNoSuchPost'
        '500':
          $ref: '#/components/responses/ErrServerError'

    post:
      description: Upload the Markdown file of this post, overwriting whichever file had been there previously.
      tags:
        - posts
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '204':
          description: Markdown file was successfully set
        '400':
          description: There is a problem with the markdown file
          content:
            application/json:
              schema:
                type: string
                example: Error rendering Markdown file
        '401':
          $ref: '#/components/responses/ErrUnauthorized'
        '403':
          $ref: '#/components/responses/ErrNoPermissionToModifyPost'
        '404':
          $ref: '#/components/responses/ErrNoSuchPost'
        '500':
          $ref: '#/components/responses/ErrServerError'

  /posts/{post_id}/tags:
    parameters:
      - $ref: '#/components/parameters/PostId'
    get:
      description: Get all tags associated with this post
      tags:
        - posts
      responses:
        '200':
          description: Returned all tag information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        '401':
          $ref: '#/components/responses/ErrUnauthorized'
        '404':
          $ref: '#/components/responses/ErrNoSuchPost'
        '500':
          $ref: '#/components/responses/ErrServerError'

    post:
      description: Add a tag to this post.
      tags:
        - posts
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - tag
              properties:
                tag:
                  type: string
                  description: Slug of the tag to add to the post
      responses:
        '204':
          description: Tag was added successfully
        '400':
          description: No tag with the specified slug
          content:
            application/json:
              schema:
                type: string
                example: No such tag exists.
        '401':
          $ref: '#/components/responses/ErrUnauthorized'
        '403':
          $ref: '#/components/responses/ErrNoPermissionToModifyPost'
        '404':
          $ref: '#/components/responses/ErrNoSuchPost'
        '500':
          $ref: '#/components/responses/ErrServerError'

  /posts/{post_id}/tags/{tag}:
    parameters:
      - $ref: '#/components/parameters/PostId'
      - $ref: '#/components/parameters/Tag'
    delete:
      description: Remove the specified tag from this post.
      tags:
        - posts
      responses:
        '204':
          description: Removed tag successfully
        '400':
          description: Specified tag does not exist or is not used in the post
          content:
            application/json:
              schema:
                type: string
                example: Specified tag does not exist or is not used in the post
        '401':
          $ref: '#/components/responses/ErrUnauthorized'
        '403':
          $ref: '#/components/responses/ErrNoPermissionToModifyPost'
        '404':
          $ref: '#/components/responses/ErrNoSuchPost'
        '500':
          $ref: '#/components/responses/ErrServerError'

  ### Commands
  /commands/publish:
    post:
      description: Publish a post
      tags:
        - commands
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - post_id
                - send_email
              properties:
                post_id:
                  type: integer
                  description: ID of the post to publish
                send_email:
                  type: boolean
                  description: Whether to trigger sending an update email to all subscribers.
      responses:
        '204':
          description: The post was published.
        '400':
          description: Could not publish post because it was already published.
          content:
            application/json:
              schema:
                type: string
                example: The post is already published
        '401':
          $ref: '#/components/responses/ErrUnauthorized'
        '404':
          $ref: '#/components/responses/ErrNoSuchPost'
        '500':
          $ref: '#/components/responses/ErrServerError'

  /commands/unpublish:
    post:
      description: Un-publish a post. This may lead to broken links!
      tags:
        - commands
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - post_id
              properties:
                post_id:
                  type: integer
                  description: ID of the post to unpublish
      responses:
        '204':
          description: The post was unpublished
        '400':
          description: The post was not published in the first place
          content:
            application/json:
              schema:
                type: string
                example: The specified post could not be unpublished because it was not published to begin with
        '401':
          $ref: '#/components/responses/ErrUnauthorized'
        '404':
          $ref: '#/components/responses/ErrNoSuchPost'
        '500':
          $ref: '#/components/responses/ErrServerError'

  /commands/feature:
    post:
      description: Make a post featured
      tags:
        - commands
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - post_id
              properties:
                post_id:
                  type: integer
                  description: ID of the post to make featured.
      responses:
        '204':
          description: The post was featured
        '400':
          description: The specified post is not published, and therefore cannot be featured. Or it was already featured.
          content:
            application/json:
              schema:
                type: string
                example: The specified post is not published, and therefore cannot be featured.
        '401':
          $ref: '#/components/responses/ErrUnauthorized'
        '404':
          $ref: '#/components/responses/ErrNoSuchPost'
        '500':
          $ref: '#/components/responses/ErrServerError'

  /commands/unfeature:
    post:
      description: Un-feature a post
      tags:
        - commands
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - post_id
              properties:
                post_id:
                  type: integer
                  description: ID of the post to un-feature
      responses:
        '204':
          description: The post was unfeatured
        '400':
          description: The specified post cannot be unfeatured because it is is not featured to begin with
          content:
            application/json:
              schema:
                type: string
                example: The specified post cannot be unfeatured because it is is not featured to begin with
        '401':
          $ref: '#/components/responses/ErrUnauthorized'
        '404':
          $ref: '#/components/responses/ErrNoSuchPost'
        '500':
          $ref: '#/components/responses/ErrServerError'

  ### Tags
  /tags:
    get:
      description: Get all tags that have been created. There are not expected to be more than 10-20 tags used on a website; therefore, this endpoint does not support paging.
      tags:
        - tags
      responses:
        '200':
          description: A list of all tags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        '401':
          $ref: '#/components/responses/ErrUnauthorized'
        '500':
          $ref: '#/components/responses/ErrServerError'

    post:
      description: Create a new tag
      tags:
        - tags
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - slug
                - description
              properties:
                name:
                  type: string
                  description: Name of the tag
                slug:
                  type: string
                  description: Slug used to create a URL for the tag. Must be unique. Cannot be changed once created.
                description:
                  type: string
                  description: Tag description
                color:
                  type: string
                  description: Hex color for the tag. Will be randomly generated by the backend if none is provided
                  pattern: '^#[0-9a-fA-F]{6}$'
      responses:
        '201':
          description: Tag was created and returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Error in query parameters or the slug is not unique
          content:
            application/json:
              schema:
                type: string
                example: A tag with the specified slug already exists.
        '401':
          $ref: '#/components/responses/ErrUnauthorized'
        '500':
          $ref: '#/components/responses/ErrServerError'

  /tags/{tag}:
    parameters:
      - $ref: '#/components/parameters/Tag'
    get:
      description: Get information about this tag
      tags:
        - tags
      responses:
        '200':
          description: Returned tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '401':
          $ref: '#/components/responses/ErrUnauthorized'
        '404':
          $ref: '#/components/responses/ErrNoSuchTag'
        '500':
          $ref: '#/components/responses/ErrServerError'

    put:
      description: Update a tag
      tags:
        - tags
      # TODO: make all required
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the tag
                description:
                  type: string
                  description: Tag description
                color:
                  type: string
                  description: Hex color for the tag. Will be randomly generated by the backend if none is provided
                  pattern: '^#[0-9a-fA-F]{6}$'
      responses:
        '200':
          description: Changed the tag and returned the updated tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Error in query parameters
          content:
            application/json:
              schema:
                type: string
                example: Invalid "color" provided
        '401':
          $ref: '#/components/responses/ErrUnauthorized'
        '404':
          $ref: '#/components/responses/ErrNoSuchTag'
        '500':
          $ref: '#/components/responses/ErrServerError'

    delete:
      description: Delete the tag. The tag will be removed from all posts that use it
      tags:
        - tags
      responses:
        '204':
          description: Tag was deleted
        '401':
          $ref: '#/components/responses/ErrUnauthorized'
        '404':
          $ref: '#/components/responses/ErrNoSuchTag'
        '500':
          $ref: '#/components/responses/ErrServerError'

  ### Files API
  /files:
    get:
      description: Get a list of files
      tags:
        - files
      parameters:
        - $ref: '#/components/parameters/QueryLimit'
        - $ref: '#/components/parameters/QueryOffset'
      responses:
        '200':
          description: Returned a list of file metadata
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
        '401':
          $ref: '#/components/responses/ErrUnauthorized'
        '500':
          $ref: '#/components/responses/ErrServerError'

    post:
      description: Upload a new file. The server stores the hash of every uploaded file. It can therefore detect if a file already exists on the server, in which case it will not store a duplicate. Please specify the content type when uploading.
      tags:
        - files
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: File already exists on server. Returns the metadata of the existing file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '201':
          description: File was uploaded. Returns the created metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        # TODO: 400 response bad file??
        '401':
          $ref: '#/components/responses/ErrUnauthorized'
        '500':
          $ref: '#/components/responses/ErrServerError'

  /files/{file_id}:
    parameters:
      - $ref: '#/components/parameters/FileId'
    get:
      description: Download the specified file
      tags:
        - files
      responses:
          '200':
            description: File was delivered
            content:
              application/octet-stream:
                schema:
                  type: string
                  format: binary
          '401':
            $ref: '#/components/responses/ErrUnauthorized'
          '404':
            $ref: '#/components/responses/ErrNoSuchFile'
          '500':
            $ref: '#/components/responses/ErrServerError'

    delete:
      description: Delete a file. Will fail if the file is referenced from any posts.
      tags:
        - files
      responses:
        '204':
          description: File was deleted
        '400':
          description: File had references and could not be deleted.
          content:
            application/json:
              schema:
                type: string
                example: Could not delete file, there are posts that reference it
        '401':
          $ref: '#/components/responses/ErrUnauthorized'
        '404':
            $ref: '#/components/responses/ErrNoSuchFile'
        '500':
          $ref: '#/components/responses/ErrServerError'

# TODO
#  /files/{file_id}/references:
#    parameters:
#      - $ref: '#/components/parameters/FileId'
#    get:
#      description: Get a list of posts that this file is referenced from.
#      tags:
#        - files
#      responses:
#        '200':
#          description: Returned a list of referenced postIds
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  type: string
#        '401':
#          $ref: '#/components/responses/ErrUnauthorized'
#        '404':
#            $ref: '#/components/responses/ErrNoSuchFile'

  /files/{file_id}/metadata:
    parameters:
      - $ref: '#/components/parameters/FileId'
    get:
      description: Get file metadata
      tags:
        - files
      responses:
        '200':
          description: Returned file metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '401':
          $ref: '#/components/responses/ErrUnauthorized'
        '404':
            $ref: '#/components/responses/ErrNoSuchFile'
        '500':
          $ref: '#/components/responses/ErrServerError'

  # Note: the actual endpoint does not have authentication set up. Should it?
  /registrations:
    post:
      description: Register a new email address in the mailing list
      tags:
        - emails
      # TODO: move into request body
      parameters:
      - name: email
        in: query
        schema:
          type: string
        required: true
      responses:
        '204':
          description: Successfully added email address to the mailing list
        '400':
          description: Invalid email address format
          content:
            application/json:
              schema:
                type: string
                example: Provided string is not a valid email address.
        '500':
          $ref: '#/components/responses/ErrServerError'
